@page "/samples/service"

<h3>Service Request</h3>

<fieldset class="form-group card p-3 mb-3">
	<legend>Contact Information</legend>
	<div class="mb-3">
		<label class="form-label" for="name">Contact Name:</label>
		<input class="form-control @(ErrorList!.ContainsKey("contact-name") ? "is-invalid" : "")" type="text" id="name" required @bind="ContactName" />
		@if (ErrorList.ContainsKey("contact-name"))
		{
			<div class="mt-3 alert alert-danger">@ErrorList["contact-name"]</div>
		}
	</div>
	<div class="mb-3">
		<label class="form-label" for="name">Phone Number:</label>
		<input class="form-control" type="text" id="name" placeholder="123-456-7890" required @bind="PhoneNumber" />
	</div>
	<div class="mb-3">
		<label class="form-label" for="name">Number of Years as Customer:</label>
		<input class="form-control" type="number" id="name" required step="1" min="0" @bind="YearsAsCustomer" />
	</div>
	<div class="mb-3">
		<div class="form-check">
			<input class="form-check-input" type="checkbox" value="" id="current-customer" @bind="CurrentCustomer">
			<label class="form-check-label" for="current-customer">
				Current Customer
			</label>
		</div>
	</div>
</fieldset>

<fieldset class="form-group card p-3 mb-3">
	<legend>Service Information</legend>
	<div class="form-check">
		<input class="form-check-input" type="radio" name="service-type" id="internet"
			   checked="@(ServiceType == "INTERNET")"
			   @onclick="@(() => ServiceType = "INTERNET")">
		<label class="form-check-label" for="internet">
			Internet Only
		</label>
	</div>
	<div class="form-check">
		<input class="form-check-input" type="radio" name="service-type" id="tv"
			   checked="@(ServiceType == "TV")"
			   @onclick="@(() => ServiceType = "TV")">
		<label class="form-check-label" for="tv">
			TV Only
		</label>
	</div>
	<div class="form-check">
		<input class="form-check-input" type="radio" name="internet-tv" id="internet-tv2"
			   checked="@(ServiceType == "INTERNET_TV")"
			   @onclick="@(() => ServiceType = "INTERNET_TV")">
		<label class="form-check-label" for="service-type2">
			Internet and Tv
		</label>
	</div>
</fieldset>

<fieldset class="form-group card p-3 mb-3">
	<legend>Required Service</legend>
	<div class="mb-3">
		<label class="form-label" for="reason">Reason for Request</label>
		<select class="form-select" id="reason" @bind="Reason" aria-label="Default select example">
			<option disabled selected>Select an option</option>
			<option value="interrupt">Service Interruption</option>
			<option value="new">New Service</option>
			<option value="other">Other</option>
		</select>
	</div>
	<div class="mb-3">
		<label for="request-info" class="form-label">Request Information</label>
		<textarea class="form-control" id="request-info" rows="3" @bind="ServiceRequest"></textarea>
	</div>
</fieldset>

<div class="mb-3">
	<button class="btn btn-primary" @onclick="HandleSubmit">Submit Request</button>
</div>

@if (Success)
{
	<div class="mt-3 alert alert-info">
		<p>Request successfully submitted</p>
		@* MarkupString is a type that can be used to render strings as HTML - COULD BE DANGEROUS! *@
		<p>@((MarkupString)DataSent!)</p>
	</div>
}

@code {
	public string? ContactName { get; set; }
	public string? PhoneNumber { get; set; }
	public int YearsAsCustomer { get; set; }
	public bool CurrentCustomer { get; set; }

	public string? ServiceType { get; set; }

	public string? Reason { get; set; }
	public string? ServiceRequest { get; set; }

	public bool Success { get; set; } = false;
	public string? DataSent { get; set; }

	public Dictionary<string, string> ErrorList { get; set; } = new();

	public void HandleSubmit()
	{
		// Guilty until proven innocent
		Success = false;
		// Reset the errors
		ErrorList.Clear();

		// Validate contact name
		if (string.IsNullOrWhiteSpace(ContactName))
		{
			ErrorList.Add("contact-name", "Contact name required");
		}

		// TODO: complete the validation checks for remaining fields
		// Phone number must match pattern "NNN-NNN-NNNN"
		// Number of years must be greater than or equal to zero
		// Service type must not be null
		// Required service must not be null, empty, or white space

		if (ErrorList.Count == 0)
		{
			// If count is zero, then the form is valid!
			Success = true;

			// Build output message
			DataSent = $@"<strong>Contact Name:</strong> {ContactName}
				<strong>Phone Number:</strong> {PhoneNumber}
				<strong>Years as Customer:</strong> {YearsAsCustomer}
				<strong>Current Customer:</strong> {CurrentCustomer}
				<strong>Service Type:</strong> {ServiceType}
				<strong>Request:</strong> {ServiceRequest}
				<strong>Reason:</strong> {Reason}";

			// Reset the fields
			ContactName = "";
			PhoneNumber = "";
			YearsAsCustomer = 0;
			CurrentCustomer = false;
			ServiceType = null;
			Reason = "Select an option";
			ServiceRequest = "";
		}

	}
}
